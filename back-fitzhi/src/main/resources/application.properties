#
# Number of concurrent active threads.
# this size is given to ThreadPoolTaskExecutor initialized in the class AsyncConfig.
#
# With a value of 1, one single asynchronous project analysis will be executed
# This will be roughly equivalent to Executors.newSingleThreadExecutor()
#
# Default value is 4
#
thread.core.pool.size=4

#
# Logging configuration file
#
logging.config=file:logback-spring.xml

#
# Upload location where upload applications are stored.
#
storage.applications.location=../data/application/upload/applications

#
# Upload location where audit attachments are stored.
#
storage.attachments.location=../data/application/upload/attachments

#
# This setting is optional.
# If this setting is empty, the application will store the local repo in a temporary directory.
# Otherwise, the clones destination will be stored in the indicated directory 
#
gitcrawler.repositories.location=../data/repos

#
# These directories will be removed from the full path of class files
# For example : /src/main/java/java/util/List.java will be treated like java/util/List.java
#
patternsCleanup=/src/main/java/;/src/test/java/;/src/main/resources/;/src/test/resources/

#
# File patterns to be taken in account, OR NOT
# IMPORTANT : THE SEPARATOR BETWEEN EACH PATTERN IS ;
#
patternsInclusion=(.java$|.js$|.cs$|.css$|.scss$|.sass$|.xhtml$|.html$|.ts$|.jsp$|.groovy$|.adoc$|.phtml$|.php$|.go$|.sh$|pom.xml$|package.json$|README.md$|Dockerfile$|.gradle$);^(?!.*/app/vendor/).*$;^(?!.*/node_modules/).*

# This boolean is setting the fact that the eligibility validation is made :
# prior to the creation of the repository-chart data file, 
# or after.
# 
# Fitzhi is storing intermediate data on a file named 'project.id'-'project.name'.json.
#
# The consequence of this settings is :
# - if TRUE, the full global generation will be faster, because data are already filtered. 
#            But, if you want to change the pattern of inclusion, on the fly, 
#            you will have to regenerate the full chart.
#
# - If FALSE, the crawler catch all files in the repository (the whole repository), 
#             before working, or filtering on it.
#             The generation will be slower, but the chart will be faster to filter.
#
# Our recommendation is to set this property to true
#
prefilterEligibility=true

#
# Do we create dynamicaly staff member automaticaly from the ghosts list ?
# 
#
# true : we automaticaly create staff member if the author looks like a "firstname surname"
# false: multiple words author are considered as ghost
#
autoStaffCreation=true

#
# Marker for dependencies
# The pathnames which contains theses keywords, and have only commit ADDs or DELETEs, 
# and NEVER a commit for UPDATE are excluded from the analysis  
#
dependenciesMarker=/jquery/;/bootstrap/;/axis2/;/chai/;/mocha/;/font-awesome/

#
# Cache directory for intermediate files representing the repositories.
# (This property is used in CacheDataHandlerImpl)
#
cache.working.dir=../data/application/sunburst-data/

#
# Cache duration (in days)
#
cache_duration=30

#
# The inactivity delay is the number of days without inactivity (as detected in the SCM) which is the condition to desactivate a staff member
# If John Doe did not show any activity (in GIT only for the actual release,), during "staffHandler.inactivity.delay" days, then John Doe will be deactivated.
# As soon as the system detect a new activiy earlier that "staffHandler.inactivity.delay" days ago, then the developer will be reactivated.
#
staffHandler.inactivity.delay=60

#
# Local directory where are stored the properties files containing the connection settings to GIT
# Each file contains 3 properties
# - an optional property with the SCM URL
# - a "user" property
# - a "password" property
#
versionControl.ConnectionSettings=../data/application/repository-settings/

# Should the slices without source be average to the value of their children, or stayed in the void color.
Sunburst.fillTheHoles=true

# Output directory of the FileServer service.
# The saving files for the entities Staff, Projects and Skills are located there.
#applicationOutDirectory=../data/application/
applicationOutDirectory=../data/application

# Settings to force that some critical properties have to be shuffled.
shuffleData=0

# Directory containing referential data
referential.dir=../data/referential/

# Time delay between each saving invocation. (in milliseconds)
dataSaver.timeDelay=10000

#
# This property is necessary to declare the host from where the front-end will access this server.
# In order to prevent any CORS exception, you have to setup your front-end URL.
# Default setting accepts 2 URL :
# - The local default URL if you have installed the front-end directly on your machine
# - THe local HTTPS version of teh default URL if you have installed the front-end directly on your machine
# - the https://spoq.io hosting the front-end on the WWW
#
allowedOrigins=http://localhost:4200,https://localhost:8080,http://localhost:8081,https://localhost:8081,https://spoq.io,https://spoq.fitzhi.com

# If set to TRUE, empty directories will be aggregated on the chart. 
# The node "com" & the node "google" will become one single node com.google
collapseEmptyDirectory=true

#
# Does Fitzhi allow self registration ?
# Either, everyone can create his own user, by simply connecting to the Fitzhi URL
# Or a login must be already present for each new user in the staff collection.
#
allowSelfRegistration=true

#
# Duration of the access token in second
#
accessTokenDuration=900

#
# Duration of the refreh token in second
# By default, this parameter is set to 3600s. Every our, the user needs to re-connect himself.
#
refreshTokenDuration=86400

#
# Do we log each commit records in the logger ?
# When true, this settings will produce a large amount of data
#
logAllCommitRecords=false

#
# File containing the Sonar supported metrics for this application
# Some metrics have default value, which means that they are taking in account in the Sonar evaluation of the project
#
supportedMetrics.file=supported-metrics.json

#
# Start the code analysis for the whole repository after the Spring boot completion.
#
startup.code.analysis=true

#
# This CRON is used by the scheduler to execute the souce code analysis 
#
cron.code.analysis=0 0 1 * * SAT

#
# This CRON is used by the scheduler to execute the experiences detection process 
#
cron.experiences.detection=0 0 15 * * MON,TUE,WED,THU,FRI

#
# This CRON is used by the scheduler to periodicaly report the active tasks on the server. 
#
cron.tasks.report=* 0/5 * * * ?

#
# This CRON is used by the scheduler to periodicaly start the generation of constellations. 
#
cron.constellations.generation=0 5 19 * * MON,TUE,WED,THU,FRI

#
# This setting activates, or not, the code parser execution.
# It has been setup to avoid memory problems on some platforms.
# The nominal behavior of the application is to run the code parser.
#
code.parser=1

#
# For testing purpose.
#
logging.level.org.springframework.security=INFO

#
# For development purpose, the security is disengaged for development purpose.
#
development.unplugged.security=0

# Maximum file size to upload a file
spring.servlet.multipart.max-file-size=4MB

# Maximum request size to upload a file
spring.servlet.multipart.max-request-size=4MB

# Multipart mode
spring.servlet.multipart.enabled=false

